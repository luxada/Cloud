---
- name: Create StorageClass
  k8s:
    state: present
    definition: |
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: sql-storage-standard
        namespace: default
      provisioner: pd.csi.storage.gke.io
      parameters:
        type: pd-standard
        csi.storage.k8s.io/fstype: ext4
      volumeBindingMode: WaitForFirstConsumer
      allowVolumeExpansion: true

- name: Apply SQL PVC
  k8s:
    state: present
    definition: |
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: mysql-pv-claim
        namespace: default
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: sql-storage-standard
        resources:
          requests:
            storage: 20Gi

- name: Apply SQL deployment
  k8s:
    state: present
    definition: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: mysql-deployment
        namespace: default
        labels:
          app: mysql
          tier: database
      spec:
        selector:
          matchLabels:
            app: mysql
        strategy:
          type: RollingUpdate
        template:
          metadata:
            labels:
              app: mysql
              tier: database
          spec:
            replicas: 1 
            containers:
            - name: mysql
              image: mysql:latest
              env: # The variables below could be set on a ConfigMap object
              - name: MYSQL_ALLOW_EMPTY_PASSWORD
                value: "true"
              - name: MYSQL_DATABASE
                value: laravel
              - name: MYSQL_USER
                value: "{{ MYSQL_USER}}"
              - name: MYSQL_PASSWORD
                value: "{{ MYSQL_PASSWORD }}" # Use Secret object in real usage
              ports:
              - containerPort: 3306
              volumeMounts:
              - name: mysql-persistent-storage
                mountPath: /var/lib/mysql
            volumes:
            - name: mysql-persistent-storage
              persistentVolumeClaim:
                claimName: mysql-pv-claim


- name: Wait for mysql Pods
  k8s_info:
    kind: Pod
    label_selectors:
      - app=mysql
  register: podsMysql
  until: podsMysql.resources | map(attribute='status.phase') | difference(['Running']) | length == 0
  retries: 60
  delay: 5

- name: Get pod name
  command: kubectl get pods -l app=mysql -o=jsonpath='{.items[0].metadata.name}'
  register: pod_name_output

- name: Wait for database creation
  shell: kubectl logs {{ pod_name_output.stdout }}
  register: mysql_logs
  until: '"X Plugin ready for connections. Bind-address" in mysql_logs.stdout'
  retries: 60
  delay: 5


- name: Apply SQL Service
  k8s:
    state: present
    definition: |
      apiVersion: v1
      kind: Service
      metadata:
        name: mysql-service
        namespace: default 
        labels:
          app: mysql
          tier: database
      spec:
        type: ClusterIP
        selector:
          app: mysql
        ports:
          - targetPort: 3306 # port that containers are listening on
            port: 3306 # port number exposed internally in the cluster

- name: Wait for Mysql service to be ready
  k8s_info:
    api_version: v1
    kind: Service
    name: mysql-service
    namespace: default
  register: serviceM_info
  until: serviceM_info.resources[0].spec.clusterIP | default('') != ''
  retries: 60
  delay: 5


